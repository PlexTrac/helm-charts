{{- define "context.core-frontend" }}
{{- if not (.Contexts).coreFrontend }}
{{- $frontendContext := dict "Chart" .Chart "Release" .Release "Values" (index .Values "core-frontend" | deepCopy) }}
{{- $_ := set $frontendContext.Values "global" .Values.global }}
{{- $_ := set $frontendContext.Values "nameOverride" (default "frontend" $frontendContext.Values.nameOverride) }}
{{- $_ := merge $ (dict "Contexts" (dict "coreFrontend" $frontendContext)) }}
{{- end }}
{{- end }}
{{- include "context.core-frontend" . }}
{{- with .Contexts.coreFrontend }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicas | default 1 }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit | default 3 }}
  selector:
    matchLabels:
      {{- include "common.labels.selectorLabels" . | nindent 6 }}
  strategy:
    {{- if gt (.Values.replicas | default 1 | int) 1 }}
    type: RollingUpdate
    {{- else }}
    type: Recreate
    {{- end }}
  template:
    metadata:
      labels:
        {{- include "common.labels" . | nindent 8 }}
    spec:
      containers:
        # TODO: add init container that can bootstrap the DB if necessary (for
        # demo, single node, etc)
      - name: {{ include "common.names.name" . }}
        image: {{ include "common.images.image" (dict "local" .Values.image "global" $) }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- with .Values.command }}
        command:
          {{ toYaml . | nindent 10 }}
        {{- end }}
        env:
        {{- with .Values.sentryDSN }}
        - name: SENTRY_DSN_FRONTEND
          value: {{ . | quote}}
        {{- end }}
        - name: CLIENT_DOMAIN_NAME
          value: {{ include "common.names.name" . }}.{{ .Release.Namespace }}:8443
        ports:
        - name: https
          containerPort: 443
          protocol: TCP
        - name: http
          containerPort: 80
          protocol: TCP
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "common.names.name" . }}
  labels:
    {{- include "common.labels" .  | nindent 4 }}
spec:
  type: ClusterIP
  ports:
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    {{- include "common.labels.selectorLabels" . | nindent 4 }}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels" .  | nindent 4 }}
  annotations:
    {{- toYaml (default (dict "annotations" dict) .Values.ingress).annotations | nindent 4 }}
spec:
  {{- /* #TODO: investigate using a defaultBackend on the main Ingress using a StorageBucket (Minio?) to serve static files */}}
  {{- with list (.Values.ingress).className .Values.global.ingressClassName | compact | first }}
  ingressClassName: {{ . }}
  {{- end }}
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ include "common.names.name" . }}
            port:
              number: 443
{{- end }}